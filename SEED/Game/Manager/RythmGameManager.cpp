#include "RythmGameManager.h"
#include <SEED/Source/Manager/CameraManager/CameraManager.h>
#include <SEED/Source/SEED.h>

/////////////////////////////////////////////////////////////////////////////////
// static変数の初期化
/////////////////////////////////////////////////////////////////////////////////
RythmGameManager* RythmGameManager::instance_ = nullptr;

////////////////////////////////////////////////////////////////////////////////
// コンストラクタ・デストラクタ
////////////////////////////////////////////////////////////////////////////////
RythmGameManager::RythmGameManager(){
}

RythmGameManager::~RythmGameManager(){
    // カメラの登録解除
    CameraManager::GetInstance()->DeleteCamera("gameCamera");
}

////////////////////////////////////////////////////////////////////////////////
// インスタンスの取得
////////////////////////////////////////////////////////////////////////////////
RythmGameManager* RythmGameManager::GetInstance(){
    if(!instance_){
        instance_ = new RythmGameManager();
    }
    return instance_;
}

//////////////////////////////////////////////////////////////////////////////////
// 初期化
//////////////////////////////////////////////////////////////////////////////////
void RythmGameManager::Initialize(){
    // カメラの初期化
    gameCamera_ = std::make_unique<BaseCamera>();
    gameCamera_->SetTranslation(Vector3(0.0f, 0.0f, 0.0f));
    gameCamera_->UpdateMatrix();

    // カメラの登録,設定
    CameraManager::GetInstance()->AddCamera("gameCamera", gameCamera_.get());
    SEED::SetCamera("gameCamera");
    //SEED::SetCamera("debug");

    // Inputの初期化
    PlayerInput::GetInstance()->Initialize();

    // プレイフィールドの初期化
    playField_ = std::make_unique<PlayField>();

    // カーソルの設定
    SEED::SetIsRepeatCursor(true);
}

//////////////////////////////////////////////////////////////////////////////////
// 更新
//////////////////////////////////////////////////////////////////////////////////
void RythmGameManager::Update(){
    // Inputの更新
    PlayerInput::GetInstance()->Update();

    // プレイフィールドの更新
    playField_->Update();

    if(Input::IsPressKey(DIK_ESCAPE)){
        SEED::ToggleRepeatCursor();
    }
}

//////////////////////////////////////////////////////////////////////////////////
// 描画
//////////////////////////////////////////////////////////////////////////////////
void RythmGameManager::Draw(){
    // Inputのカーソル描画
    PlayerInput::GetInstance()->Draw();
    
    // プレイフィールドの描画
    playField_->Draw();
}
