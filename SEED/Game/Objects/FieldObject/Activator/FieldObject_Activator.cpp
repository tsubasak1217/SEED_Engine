#include "FieldObject_Activator.h"
#include "../FieldObject.h"

#include "FieldObject/Door/FieldObject_Door.h"
#include "FieldObject/MoveFloor/FieldObject_MoveFloor.h"

#include <algorithm>
#include <string>
#include <imgui.h> // ImGui を使用する場合のヘッダ


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initialize
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FieldObject_Activator::Initialize(){
    // 親クラス (FieldObject) の初期化を呼ぶ
    FieldObject::Initialize();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Update
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FieldObject_Activator::Update(){

    // 前フレームでの衝突状態を記録し、本フレームの衝突判定用フラグを初期化
    wasCollidingLastFrame_ = isColliding_;
    isColliding_ = false;
    currentWeight_ = 0.0f;

    // 親クラス (FieldObject) の更新を呼ぶ
    FieldObject::Update();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Draw
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FieldObject_Activator::Draw(){
    // スイッチ的な使い方を想定した色分けを例示（実際は任意）
    int leftRequiredWeight = std::clamp(int(requiredWeight_ - currentWeight_), 0, 100);
    if (leftRequiredWeight == 0){
        // 必要重量を満たしていれば緑色
        model_->color_ = {0.0f, 1.0f, 0.0f, 1.0f};
    } else{
        // 足りなければ赤色
        model_->color_ = {1.0f, 0.0f, 0.0f, 1.0f};
    }

    // 親クラス (FieldObject) の描画を呼ぶ
    FieldObject::Draw();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BeginFrame
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FieldObject_Activator::BeginFrame(){
    // 親クラス (FieldObject) の BeginFrame を呼ぶ
    FieldObject::BeginFrame();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EndFrame
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FieldObject_Activator::EndFrame(){
    // 親クラス (FieldObject) の EndFrame を呼ぶ
    FieldObject::EndFrame();

    // スイッチなどの用途を想定：
    //  衝突したオブジェクトの重さが必要重量を超えていれば「衝突中」と判定する
    if (static_cast< int >(currentWeight_) >= requiredWeight_){
        isColliding_ = true;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ShowImGui
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FieldObject_Activator::ShowImGui(){
    // 重量を ImGui に表示（編集）
    ImGui::Text("Required Weight: %d", requiredWeight_);
    // 他に必要なパラメータ等があればここに追加
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegisterObserver
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FieldObject_Activator::RegisterObserver(IObserver* observer){
    // Observer を登録する
    observers_.push_back(observer);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UnregisterObserver
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FieldObject_Activator::UnregisterObserver(IObserver* observer){
    // Observer の登録を解除
    observers_.erase(std::remove(observers_.begin(), observers_.end(), observer), observers_.end());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Notify
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FieldObject_Activator::Notify(const std::string& event, void* data){
    // 登録済みの Observer 全員にイベントを送信
    for (auto& observer : observers_){
        if (observer){
            observer->OnNotify(event, data);
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OnCollision
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FieldObject_Activator::OnCollision( BaseObject* other, ObjectType objectType){
    [[maybe_unused]] float speed = other->GetDropSpeed(); // 重さ判定をスキップするオブジェクトに追加
    // スイッチ等で使用する重さを加算する
    //  ※レバーはこの機能を使わない想定
    if (objectType == ObjectType::Player ||
        objectType == ObjectType::PlayerCorpse){
        currentWeight_ += other->GetSwitchPushWeight();
        isColliding_ = true;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AddAssociatedDoor
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FieldObject_Activator::AddAssociatedDoor(FieldObject_Door* door){
    // ドアの重複登録を防ぐ
    if (std::find(associatedDoors_.begin(), associatedDoors_.end(), door) == associatedDoors_.end()){
        associatedDoors_.push_back(door);
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RemoveAssociatedDoor
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FieldObject_Activator::RemoveAssociatedDoor(FieldObject_Door* door){
    // 指定のドアをリストから削除
    auto it = std::remove(associatedDoors_.begin(), associatedDoors_.end(), door);
    associatedDoors_.erase(it, associatedDoors_.end());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GetAssociatedDoors
////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::vector<FieldObject_Door*>& FieldObject_Activator::GetAssociatedDoors(){
    // ドアのリストを返す
    return associatedDoors_;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AddAssociatedMoveFloor
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FieldObject_Activator::AddAssociatedMoveFloor(FieldObject_MoveFloor* moveFloor){
    // 移動床の重複登録を防ぐ
    if (std::find(associatedMoveFloors_.begin(), associatedMoveFloors_.end(), moveFloor) == associatedMoveFloors_.end()){
        associatedMoveFloors_.push_back(moveFloor);
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RemoveAssociatedMoveFloor
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FieldObject_Activator::RemoveAssociatedMoveFloor(FieldObject_MoveFloor* moveFloor){
    // 指定の移動床をリストから削除
    auto it = std::remove(associatedMoveFloors_.begin(), associatedMoveFloors_.end(), moveFloor);
    associatedMoveFloors_.erase(it, associatedMoveFloors_.end());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GetAssociatedMoveFloors
////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::vector<FieldObject_MoveFloor*>& FieldObject_Activator::GetAssociatedMoveFloors(){
    // 移動床のリストを返す
    return associatedMoveFloors_;
}
