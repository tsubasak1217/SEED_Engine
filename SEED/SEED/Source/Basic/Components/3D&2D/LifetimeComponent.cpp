#include "LifetimeComponent.h"
#include <SEED/Source/Basic/Object/GameObject.h>
#include <SEED/Source/Basic/Object/GameObject2D.h>
#include <Game/GameSystem.h>

/////////////////////////////////////////////////////////////////////////////////////////////////////
// コンストラクタ
/////////////////////////////////////////////////////////////////////////////////////////////////////
LifetimeComponent::LifetimeComponent(std::variant<GameObject*, GameObject2D*> pOwner, const std::string& tagName)
    : IComponent(pOwner, tagName){
    if(tagName == ""){
        componentTag_ = "Lifetime_ID:" + std::to_string(componentID_);
    }

#ifdef _DEBUG
    // デバッグ時はstayAliveをデフォルトでtrueにしておく
    stayAlive_ = true;
#endif // _DEBUG
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// 初期化
/////////////////////////////////////////////////////////////////////////////////////////////////////
void LifetimeComponent::Initialize(){
    // タイマー初期化
    timer_ = Timer(1.0f);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// フレーム開始時処理
/////////////////////////////////////////////////////////////////////////////////////////////////////
void LifetimeComponent::BeginFrame(){
}


/////////////////////////////////////////////////////////////////////////////////////////////////////
// 更新処理
/////////////////////////////////////////////////////////////////////////////////////////////////////
void LifetimeComponent::Update(){
    // 時間の更新
    timer_.Update();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// 描画処理
/////////////////////////////////////////////////////////////////////////////////////////////////////
void LifetimeComponent::Draw(){
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// フレーム終了時処理
/////////////////////////////////////////////////////////////////////////////////////////////////////
void LifetimeComponent::EndFrame(){

    // 生存状態の確認
    if(!stayAlive_ && timer_.IsFinished()){
        // オーナーを終了状態にする
        if(owner_.is2D){
            owner_.owner2D->isAlive_ = false;
        } else{
            owner_.owner3D->isAlive_ = false;
        }
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// 終了処理
/////////////////////////////////////////////////////////////////////////////////////////////////////
void LifetimeComponent::Finalize(){
}


/////////////////////////////////////////////////////////////////////////////////////////////////////
// 編集処理
/////////////////////////////////////////////////////////////////////////////////////////////////////
void LifetimeComponent::EditGUI(){
#ifdef _DEBUG
    ImGui::Indent();

    // 生存状態の確認
    ImGui::Checkbox("stayAlive##" + componentTag_, &stayAlive_);
    if(ImGui::BeginItemTooltip()){
        ImGui::Text("寿命が来てもオーナーを削除しないようにします。\nデバッグ時のみ有効です。");
        ImGui::EndTooltip();
    }

    ImGui::Text("Alive = %d", !timer_.IsFinished());

    // 設定
    ImGui::SeparatorText("詳細");
    ImGui::DragFloat("寿命##" + componentTag_, &timer_.duration, 0.1f, 0.0f, 1000.0f);
    ImFunc::PlayBar("現在の時間##" + componentTag_, timer_);

    ImGui::Unindent();
#endif // _DEBUG
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// json関連
/////////////////////////////////////////////////////////////////////////////////////////////////////
nlohmann::json LifetimeComponent::GetJsonData() const{
    nlohmann::json jsonData;
    jsonData["componentType"] = "Lifetime";
    jsonData.update(IComponent::GetJsonData());
    jsonData["time"] = timer_.duration;
    return jsonData;
}

void LifetimeComponent::LoadFromJson(const nlohmann::json& jsonData){
    IComponent::LoadFromJson(jsonData);
    timer_.Initialize(jsonData.value("time", 1.0f));
}
