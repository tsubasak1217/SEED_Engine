#include "CollisionManager.h"

/////////////////////////////////////////////////////////////////////////////////////
// static変数の初期化
/////////////////////////////////////////////////////////////////////////////////////

CollisionManager* CollisionManager::instance_ = nullptr;

/////////////////////////////////////////////////////////////////////////////////////
// コンストラクタ・デストラクタ・初期化関数
/////////////////////////////////////////////////////////////////////////////////////

CollisionManager::~CollisionManager(){}

CollisionManager* CollisionManager::GetInstance(){
    if(instance_ == nullptr){
        instance_ = new CollisionManager();
    }
    return instance_;
}

void CollisionManager::Initialize(){
    GetInstance();
    ResetColliderList();
}

/////////////////////////////////////////////////////////////////////////////////////
// 当たり判定関数
/////////////////////////////////////////////////////////////////////////////////////

void CollisionManager::CheckCollision(){}


/////////////////////////////////////////////////////////////////////////////////////
// コライダーの追加・削除関数
/////////////////////////////////////////////////////////////////////////////////////

void CollisionManager::ResetColliderList(){
    instance_->colliders_.clear();
}

void CollisionManager::AddCollider(Collider* object){
    instance_->colliders_.push_back(object);
}

void CollisionManager::AddColliders(std::list<Collider*> objects){
    instance_->colliders_.insert(instance_->colliders_.end(), objects.begin(), objects.end());
}

void CollisionManager::AddColliders(std::vector<Collider*> objects){
    instance_->colliders_.insert(instance_->colliders_.end(), objects.begin(), objects.end());
}
