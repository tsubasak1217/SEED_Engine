#include "Scene_Clear.h"

//states
#include "State/ClearState_Enter.h"

////////////////////////////////////////////////////////////////////////////////////////////
//
// コンストラクタ・デストラクタ
//
////////////////////////////////////////////////////////////////////////////////////////////
Scene_Clear::Scene_Clear(){
    Initialize();
}

Scene_Clear::~Scene_Clear(){}


////////////////////////////////////////////////////////////////////////////////////////////
//
// 初期化
//
////////////////////////////////////////////////////////////////////////////////////////////
void Scene_Clear::Initialize(){
    //=========================== dinosaur =======================//
    dinosaur_ = std::make_unique<Model>();
    dinosaur_ = std::make_unique<Model>("clear_breakEgg.gltf");
    dinosaur_->StartAnimation("breakEgg",false);

    // transform Initialize
    dinosaur_->rotate_.y = 3.141592f;
    dinosaur_->translate_ = {0.0f,-1.2f,10.0f};

    dinosaur_->isRotateWithQuaternion_ = false;
    dinosaur_->isParentScale_ = false;
    dinosaur_->UpdateMatrix();

    // 先に読み込んでおく
    ModelManager::LoadModel("clear_dance.gltf");

    //=========================== light =========================//
    directionalLight_ = std::make_unique<DirectionalLight>();
    directionalLight_->color_ = MyMath::FloatColor(0xffffffff);
    directionalLight_->direction_ = MyMath::Normalize({1.0f,-1.0f,0.5f});
    directionalLight_->intensity = 1.0f;

    //=========================== state =========================//
    currentState_ = std::make_unique<ClearState_Enter>(this);

}

////////////////////////////////////////////////////////////////////////////////////////////
//
// 終了処理
//
////////////////////////////////////////////////////////////////////////////////////////////
void Scene_Clear::Finalize(){}

////////////////////////////////////////////////////////////////////////////////////////////
//
// 更新
//
////////////////////////////////////////////////////////////////////////////////////////////
void Scene_Clear::Update(){
    ImGui::Begin("dinosaur");
    ImGui::DragFloat3("scale",&dinosaur_->scale_.x,0.01f);
    ImGui::DragFloat3("rotate",&dinosaur_->rotate_.x,0.01f);
    ImGui::DragFloat3("translate",&dinosaur_->translate_.x,0.01f);
    ImGui::End();

    //=========================== State =======================//
    if(currentState_){
        currentState_->Update();
    }

    //=========================== light =======================//
    directionalLight_->SendData();

}

////////////////////////////////////////////////////////////////////////////////////////////
//
// 描画
//
////////////////////////////////////////////////////////////////////////////////////////////
void Scene_Clear::Draw(){
    //=========================== Object =======================//
    dinosaur_->Draw();

    //=========================== State =======================//
    if(currentState_){
        currentState_->Draw();
    }
}

////////////////////////////////////////////////////////////////////////////////////////////
//
// フレーム開始処理
//
////////////////////////////////////////////////////////////////////////////////////////////
void Scene_Clear::BeginFrame(){
    Scene_Base::BeginFrame();

    if(currentState_){
        currentState_->BeginFrame();
    }
}

////////////////////////////////////////////////////////////////////////////////////////////
//
// フレーム終了処理
//
////////////////////////////////////////////////////////////////////////////////////////////
void Scene_Clear::EndFrame(){
    if(currentState_){
        currentState_->EndFrame();
    }
}


/////////////////////////////////////////////////////////////////////////////////////////
//
//  すべてのコライダーをコリジョンマネージャに渡す
//
/////////////////////////////////////////////////////////////////////////////////////////
void Scene_Clear::HandOverColliders(){}
