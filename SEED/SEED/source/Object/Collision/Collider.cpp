#include "Collider.h"
#include "SEED.h"
#include "Base/BaseObject.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//    static変数
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint32_t Collider::nextID_ = 0;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//     初期化・終了関数
// 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Collider::Collider(){
    colliderID_ = nextID_++;
}

Collider::~Collider(){}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//     更新関数
// 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Collider::Update(){

    // 衝突フラグの更新
    preIsCollision_ = isCollision_;
    isCollision_ = false;

    // 衝突リストのクリア
    collisionList_.clear();

    // 色の初期化
    color_ = Vector4(0.0f, 0.0f, 1.0f, 1.0f);

    // 行列の更新
    UpdateMatrix();
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//     行列更新関数
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Collider::UpdateMatrix(){

    // ローカル行列の更新
    localMat_ = AffineMatrix(scale_, rotate_, translate_);

    // ワールド行列の更新
    if(parentMat_){

        if(isParentRotate_ + isParentScale_ + isParentTranslate_ == 3){
            worldMat_ = *parentMat_ * localMat_;
            return;
        } else{
            
            Matrix4x4 cancelMat = IdentityMat4();

            // 親の行列から取り出した要素を打ち消す行列を作成
            if(!isParentScale_){
                Vector3 inverseScale = Vector3(1.0f,1.0f,1.0f)/ExtractScale(*parentMat_);
                cancelMat = cancelMat * ScaleMatrix(inverseScale);
            }

            if(!isParentRotate_){
                Vector3 inverseRotate = ExtractRotation(*parentMat_) * -1.0f;
                cancelMat = cancelMat * RotateMatrix(inverseRotate);
            }

            if(!isParentTranslate_){
                Vector3 inverseTranslate = ExtractTranslation(*parentMat_) * -1.0f;
                cancelMat = cancelMat * TranslateMatrix(inverseTranslate);
            }

            worldMat_ = (*parentMat_ * cancelMat)* localMat_;

        }

    } else{
        worldMat_ = localMat_;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//     描画関数
// 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Collider::Draw(){}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//     衝突時関数
// 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Collider::CheckCollision(Collider* collider){ collider; }

void Collider::OnCollision(Collider* collider){

    // 衝突フラグを立てる
    isCollision_ = true;
    // 赤色に変更
    color_ = Vector4(1.0f, 0.0f, 0.0f, 1.0f);
    // 親オブジェクトにも衝突を通知
    if(parentObject_){
        parentObject_->OnCollision(collider->parentObject_);
    }

    // 衝突リストに追加
    collisionList_.insert(collider->colliderID_);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//     衝突判定用のAABB更新関数
// 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Collider::UpdateBox(){}
