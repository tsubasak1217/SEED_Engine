#include <Game/Scene/Scene_Game/Scene_Game.h>
#include <SEED/Source/SEED.h>
#include <Environment/Environment.h>
#include <SEED/Source/Manager/EffectSystem/EffectSystem.h>
#include <SEED/Source/Manager/CameraManager/CameraManager.h>
#include <SEED/Source/Manager/AudioManager/AudioManager.h>

// state
#include <Game/Scene/Scene_Game/State/GameState_Play.h>

/////////////////////////////////////////////////////////////////////////////////////////
//
//  コンストラクタ・デストラクタ
//
/////////////////////////////////////////////////////////////////////////////////////////

Scene_Game::Scene_Game() : Scene_Base(){
};

Scene_Game::~Scene_Game(){
    Scene_Base::Finalize();
    SEED::RemoveCamera("gameCamera");
    SEED::SetMainCamera("default");
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  初期化
//
/////////////////////////////////////////////////////////////////////////////////////////

void Scene_Game::Initialize(){

    // パーティクルの初期化
    EffectSystem::DeleteAll();

    ////////////////////////////////////////////////////
    // State初期化
    ////////////////////////////////////////////////////

    SEED::SetSkyBox("DefaultAssets/CubeMaps/rostock_laage_airport_4k.dds");

    // Playステートに初期化
    ChangeState(new GameState_Play(this));

    if(currentState_){
        currentState_->Initialize();
    }

    ////////////////////////////////////////////////////
    //  カメラ初期化
    ////////////////////////////////////////////////////

    auto* scene = this;
    scene;

    ////////////////////////////////////////////////////
    //  ライトの初期化
    ////////////////////////////////////////////////////

    directionalLight_ = std::make_unique<DirectionalLight>();
    directionalLight_->direction_ = { -0.5f,-1.0f,0.0f };

    ////////////////////////////////////////////////////
    //  オブジェクトの初期化
    ////////////////////////////////////////////////////


    ////////////////////////////////////////////////////
    // スプライトの初期化
    ////////////////////////////////////////////////////


    ////////////////////////////////////////////////////
    // Audio の 初期化
    ////////////////////////////////////////////////////


    ////////////////////////////////////////////////////
    //  他クラスの情報を必要とするクラスの初期化
    ////////////////////////////////////////////////////



    /////////////////////////////////////////////////
    //  関連付けや初期値の設定
    /////////////////////////////////////////////////

}

void Scene_Game::Finalize() {
    Scene_Base::Finalize();
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  更新処理
//
/////////////////////////////////////////////////////////////////////////////////////////

void Scene_Game::Update(){

    /*========================== ImGui =============================*/


    /*======================= 各状態固有の更新 ========================*/

    // ヒエラルキー内のオブジェクトの更新
    hierarchy_->Update();

    if(currentState_){
        currentState_->Update();
    }

    if(currentEventState_){
        currentEventState_->Update();
    }

    /*==================== 各オブジェクトの基本更新 =====================*/


}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  描画処理
//
/////////////////////////////////////////////////////////////////////////////////////////

void Scene_Game::Draw(){

    /*======================= 各状態固有の描画 ========================*/

    if(currentEventState_){
        currentEventState_->Draw();
    }

    if(currentState_){
        currentState_->Draw();
    }

    //SEED::DrawSkyBox(true);
    //SEED::DrawGrid();

    /*==================== 各オブジェクトの基本描画 =====================*/

    // ヒエラルキー内のオブジェクトの描画
    hierarchy_->Draw();

    // ライトをセット
    directionalLight_->SendData();

}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  フレーム開始時の処理
//
/////////////////////////////////////////////////////////////////////////////////////////
void Scene_Game::BeginFrame(){

    // ヒエラルキー内のオブジェクトの描画
    hierarchy_->BeginFrame();

    // 現在のステートがあればフレーム開始処理を行う
    if(currentState_){
        currentState_->BeginFrame();
    }
}


/////////////////////////////////////////////////////////////////////////////////////////
//
//  フレーム終了時の処理
//
/////////////////////////////////////////////////////////////////////////////////////////
void Scene_Game::EndFrame(){

    // ヒエラルキー内のオブジェクトのフレーム終了処理
    hierarchy_->EndFrame();

    // 現在のステートがあればフレーム終了処理を行う
    if(currentState_){
        currentState_->EndFrame();
    }
}


/////////////////////////////////////////////////////////////////////////////////////////
//
//  すべてのコライダーをコリジョンマネージャに渡す
//
/////////////////////////////////////////////////////////////////////////////////////////
void Scene_Game::HandOverColliders(){

    if(currentState_){
        currentState_->HandOverColliders();
    }
}