#include "StageManager.h"

// 各ブロックのヘッダーファイル
#include "FieldObject/Door/FieldObject_Door.h"
#include "FieldObject/GrassSoil/FieldObject_GrassSoil.h"
#include "FieldObject/Soil/FieldObject_Soil.h"
#include "FieldObject/Sphere/FieldObject_Sphere.h"
#include "FieldObject/Start/FieldObject_Start.h"
#include "FieldObject/Goal/FieldObject_Goal.h"
#include "FieldObject/Switch/FieldObject_Switch.h"
#include "FieldObject/ViewPoint/FieldObject_ViewPoint.h"


///////////////////////////////////////////////////////////////////////
// コンストラクタ
///////////////////////////////////////////////////////////////////////
StageManager::StageManager(){}

StageManager::StageManager(ISubject& subject){
    for(int i = 0; i < kStageCount_; i++){
        stages_[i] = std::make_unique<Stage>(subject);
        stages_[i]->SetStageNo(i);
    }

    Initialize();
}

///////////////////////////////////////////////////////////////////////
// デストラクタ
///////////////////////////////////////////////////////////////////////
StageManager::~StageManager(){}

///////////////////////////////////////////////////////////////////////
// 初期化
///////////////////////////////////////////////////////////////////////
void StageManager::Initialize(){
    LoadStages();
}

///////////////////////////////////////////////////////////////////////
// 終了処理
///////////////////////////////////////////////////////////////////////
void StageManager::Finalize(){}

///////////////////////////////////////////////////////////////////////
// 更新
///////////////////////////////////////////////////////////////////////
void StageManager::Update(){
    for(auto& stage : stages_){
        stage->Update();
    }

}

///////////////////////////////////////////////////////////////////////
// 描画
///////////////////////////////////////////////////////////////////////
void StageManager::Draw(){
    for(auto& stage : stages_){
        stage->Draw();
    }
}


///////////////////////////////////////////////////////////////////////
// フレーム開始時の処理
///////////////////////////////////////////////////////////////////////
void StageManager::BeginFrame(){
    for(auto& stage : stages_){
        stage->BeginFrame();
    }
}


///////////////////////////////////////////////////////////////////////
// フレーム終了時の処理
///////////////////////////////////////////////////////////////////////
void StageManager::EndFrame(){
    for(auto& stage : stages_){
        stage->EndFrame();
    }
}

///////////////////////////////////////////////////////////////////////
// コライダーを渡す
///////////////////////////////////////////////////////////////////////
void StageManager::HandOverColliders(){
    stages_[currentStageNo_]->HandOverColliders();
}

///////////////////////////////////////////////////////////////////////
// ステージを変更する
///////////////////////////////////////////////////////////////////////
void StageManager::StepStage(int32_t step){
    currentStageNo_ += step;
    currentStageNo_ = std::clamp(currentStageNo_, 0, kStageCount_ - 1);
}

///////////////////////////////////////////////////////////////////////
// ステージの読み込み
///////////////////////////////////////////////////////////////////////
void StageManager::LoadStages(){
    // ステージの読み込み
    for(int i = 0; i < kStageCount_; i++){
        std::string filepath = "resources/jsons/Stages/stage_" + std::to_string(i + 1) + ".json";
        stages_[i]->LoadFromJson(filepath);
    }
}
