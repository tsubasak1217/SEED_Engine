#include "SceneManager.h"
#include <thread>
#include "Scene_Base.h"
#include "Scene_Game/Scene_Game.h"
#include "Scene_Title/Scene_Title.h"
#include "Scene_Clear/Scene_Clear.h"
#include "CollisionManaer/CollisionManager.h"
#include "CollisionManaer/ColliderEditor.h"

///////////////////////////////////////////////////////////////////////////////
// static変数
///////////////////////////////////////////////////////////////////////////////
SceneManager* SceneManager::instance_ = nullptr;
std::unique_ptr<Scene_Base> SceneManager::pScene_ = nullptr;

///////////////////////////////////////////////////////////////////////////////
// コンストラクタ・デストラクタ
///////////////////////////////////////////////////////////////////////////////
SceneManager::SceneManager(){
}

SceneManager::~SceneManager(){
    delete instance_;
    instance_ = nullptr;
}

///////////////////////////////////////////////////////////////////////////////
// 初期化
///////////////////////////////////////////////////////////////////////////////
void SceneManager::Initialize(){
    instance_ = GetInstance();

    pScene_.reset(new Scene_Title(instance_));
}

///////////////////////////////////////////////////////////////////////////////
// 更新
///////////////////////////////////////////////////////////////////////////////
void SceneManager::Update(){
    // シーンの更新
    pScene_->Update();
    // Colliderの追加
    pScene_->HandOverColliders();
    // 当たり判定
    CollisionManager::CheckCollision();
    // すべての更新終了後にカメラを更新
    CameraManager::Update();
}

///////////////////////////////////////////////////////////////////////////////
// 描画
///////////////////////////////////////////////////////////////////////////////
void SceneManager::Draw(){
    pScene_->Draw();
    CollisionManager::Draw();
}

///////////////////////////////////////////////////////////////////////////////
// フレーム開始処理
///////////////////////////////////////////////////////////////////////////////
void SceneManager::BeginFrame(){
    // Colliderのリセット
    CollisionManager::ResetColliderList();
    // シーンのフレーム開始処理
    pScene_->BeginFrame();
}

///////////////////////////////////////////////////////////////////////////////
// フレーム終了処理
///////////////////////////////////////////////////////////////////////////////
void SceneManager::EndFrame(){
    pScene_->EndFrame();
}


///////////////////////////////////////////////////////////////////////////////
// インスタンス取得
///////////////////////////////////////////////////////////////////////////////
SceneManager* SceneManager::GetInstance(){

    if(!instance_){
        instance_ = new SceneManager();
    }

    return instance_;
}

///////////////////////////////////////////////////////////////////////////////
// シーン変更
///////////////////////////////////////////////////////////////////////////////
void SceneManager::ChangeScene(Scene_Base* newScene){
    pScene_.reset(newScene);
}

void SceneManager::ChangeScene(std::unique_ptr<Scene_Base> newScene){
    pScene_ = std::move(newScene);
}
